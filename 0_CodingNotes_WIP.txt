################################################################################
#############################    CODE + NOTES   ################################
################################################################################
git remote add origin https://github.com/TessaFossilFinder/23_Rhizaria_SMTs.git
# Sets the new remote
git remote -v
# Verifies the new remote URL
###################################################################
###################################################################
## BLAST NCBI  Transcriptome shotgun archive (TSA) using tblastn ##
###################################################################
###################################################################
# for ERG6 (P25087.4) protein sequence: 0_smtquery.txt limited to Rhizaria (taxid:543769)
# changed parameters to top 1000 sequences
# returned 347 sequences saved to 0_Rhizaria_TSA.fasta

######################################################
# Format file & headers to: >[species]|[Accession #] #
######################################################
# in bbedit find (>)(.*)( TSA: )(\S*)( \S*)(.*) replace with 

(>)(.*)( TSA: )(\S*)(.*) replace with \1\4\5|\2
## removed ',' and replace spaces with '_' 
### removed "environmental" sequences @ lines 564, 899, 1178, 1329, 2114, 2723, 2796, 3348, 4108, 4343, 4865 (n=11)
### saved as 0_Rhizaria_TSA.edit.fasta
######## clean up Globobulimina sequences here next time ##################

###################################################
# TRANSLATE into protein sequences w/TRANSDECODER #
###################################################
# requires TransDecoder (https://github.com/TransDecoder/TransDecoder)

# Translate TSA results into proteins using transdecoder
TransDecoder.LongOrfs -t 0_Rhizaria_TSA.edit.fasta
TransDecoder.Predict -t 0_Rhizaria_TSA.edit.fasta
# returned 270 proteins

# Saved intermeditate files to 0_Transdecoder and renamed 0_Rhizaria_TSA.edit.fasta.transdecoder > 1_Rhizaria.fasta
## in bbedit reformatted headers to remove everything after first occurence of a space

################################################################################
################################################################
## BLAST NCBI non-redundant protein database (nr) using blatp ##
################################################################
################################################################
# for ERG6 protein sequence: 0_smtquery.txt limited to SAR supergroup (taxid:2698737)
# changed parameters to max target sequences of 1000
## returned 589 sequences, saved > 0_SAR_nr.fasta

######################################################
# Format file & headers to: >[species]|[Accession #] #
######################################################

sed -E 's/^>(.*)\[(.*)\]/>\2|\1/' 0_SAR_nr.fasta > step1.fasta
sed -E 's/^(>[^|]+\|[^ ]+).*/\1/' step1.fasta > step2.fasta
# In bbedit, search for: (^[>aA-zZ]*)( )(.*)( )(.*)([|])(.*) & replace with: \1\2\3\6\7
## saved as step3.fasta
sed 's/ /_/g' step3.fasta > 1_SAR.fasta
## manually cleaned line 2022, 3115, 3143(Pythium sequences)
### also remove '_CCAP' everywhere
# Remove temp. files
rm step*

################################################################################
## BLAST NCBI refseq-protein database for OUTGROUP using blastp ##
##################################################################
# for ERG6 against the refseq_protein database.
## limited returns to best 1000 and restricted it to the following taxa:

# Amoebozoa (taxid:554915)
# Ancoracysta (taxid:2056028)
# Apusozoa (taxid:554296)
# Cryptophyceae (taxid:3027)
# Discoba (taxid:2611352)
# Glaucocystophyceae (taxid:38254)
# Haptista (taxid:2608109)
# Malawimonadida (taxid:2795258)
# Metamonada (taxid:2611341)
# Opisthokonta (taxid:33154)
# Rhodophyta (taxid:2763)
## saved as 0_Outgroup.fasta
##### GO FIND OG FILE ###
## returned 1000 results ## too much?
### look for telonemia specifically! # NEXT RUN #

#################################################################
# Format file & headers to: >[species]|[Accession #]|"OUTGROUP" #
#################################################################
sed -E 's/^>(.*)\[(.*)\]/>\2|\1/' 0_OG_refpdb_7-7-23.fasta > step1.fasta
sed -E 's/^(>[^|]+\|[^ ]+).*/\1/' step1.fasta > step2.fasta
# In bbedit, search for: (^[>aA-zZ]*)( )(.*)( )(.*)([|])(.*) & replace with: \1\2\3\6\7
## saved as step3.fasta
sed 's/ /_/g' step3.fasta > step4.fasta
## code not perfect, had to manually edit Line 163, 175, and 5455 (Candida sequences)

# annotate with "OUTGROUP"
sed '/^>/s/$/|OUTGROUP/' step4.fasta > 1_Outgroup.fasta

# Cleanup
rm step*


#######################
# COMBINE fasta files #
#######################
Cat 1_Rhizaria.fasta 1_SAR.fasta 1_Outgroup.fasta > 1_Rhizaria+.fasta

# Count
grep -c '^>' 1_SMT_all.fasta
## Returns 1859 sequences

################################################################################
############################################
## Sort and remove duplicates with CD-Hit ##
############################################
############################################
# Requires CD-HIT (http://weizhong-lab.ucsd.edu/cd-hit/)

#####################################################
# Breakup all sequences into individual fasta files #
#####################################################
# create temp directory 
mkdir temp
cd temp

# search for lines starting with '>', replace with the same content followed by a tab character. Content is then redirected to a file named tmp1.
gsed s/"\(>\)\(.*\)"/"\1\2\t"/g ../1_SMT_all.fasta > tmp1
# Removes all newline characters, and saves the modified content to a file named tmp2
tr -d '\n' < tmp1 > tmp2
sed 's/>\([^\n]*\)/\n>\1/g' tmp2 > tmp3
gsed 's/>/\n>/g' tmp2 > tmp3
# Add tab character before the first "|" symbol in each line, and sort the content of tmp3
## Modified from DG code
sort tmp3 | gsed -E 's/^([^|]*)|/\1\t/' > 1_SMT_all.txt

# split into files by ID
awk -F'\t' '!_[$1]++ { fn && close(fn)
fn = $1 ".tmp"
}
{ print > fn } ' 1_SMT_all.txt


# reformat into fasta
for i in *.tmp; do
	gsed -E 's/^([^\t]*)\t/\1/;s/\t([^\t]*)$/\n\1/' $i > ${i%.tmp}.fasta;
done

#################
## run CD-Hit  ##
#################
for i in *.fasta; do
	cd-hit -i $i -o ${i%.fasta}.cd-hit.txt -d 100 -c 0.90;
done

# concatenate individuals cd-hit files back together
cat *.cd-hit.txt > ../2_Rhizaria_cd.fasta

# Count
grep -c '^>' ../2_Rhizaria_cd.fasta
## Returns 1231 sequences

cd ../
# remove temp directory
rm -r temp

###############################################################################
#################################################
## Search protein sequences against PFAM/HMMER ##
#################################################
#################################################
# Requires HMMER (http://hmmer.org)
# Requires pfam_scan 
# ftp://ftp.ebi.ac.uk/pub/databases/Pfam//Tools/PfamScan.tar.gz
# pfam_scan can be installed with Conda. Add conda cask to homebrew:
brew install anaconda --cask
export PATH=/usr/local/anaconda3/bin:$PATH
conda install -c bioconda pfam_scan

mkdir Pfam
cd Pfam

# Install the Pfam database
wget ftp://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.gz
wget ftp://ftp.ebi.ac.uk/pub/databases/Pfam/current_release/Pfam-A.hmm.dat.gz  
gunzip Pfam-A.hmm.gz
gunzip Pfam-A.hmm.dat.gz
hmmpress Pfam-A.hmm
cd ../

# Run PfamScan
pfam_scan.pl \
-outfile 3_Rhizaria_pfam.txt \
-fasta 2_Rhizaria_cd.fasta -dir ./Pfam/

# Cleanup
rm -r Pfam

# count
## lines 29-1872=1843

################################################################################
##############################################
## EXTRACTING conserved domains w/ SAMTOOLS ##
##############################################
##############################################
###############################
# Extract Methyltransf domain #
###############################
grep '.* Methyltransf_\d* *' 3_Rhizaria_pfam.txt > tmp1
# use squeeze flag (-s) in tr to replace all white spaces with a tab
tr -s ' ' \\t < tmp1 > tmp2
# extract envelope coordinates
awk -v OFS='\t' '{print $1,$4,$5}' tmp2 > tmp3
# Concatenate domains broken into multiple fragments 
awk -F'\t' -v OFS='\t' '{x=$1;$1="";a[x]=a[x]$0}END{for(x in a)print x,a[x]}' tmp3 > tmp4
tr -s '\t' \\t < tmp4 > tmp5
# Extract name, first envelope coordinate, last envelope coordinate
awk -v OFS='\t' '{print "\047"$1"\047"":"$2"-"$NF}' tmp5 > tmp6
# Extract domains with samtools
xargs samtools faidx --length 100000000 2_Rhizaria_cd.fasta < tmp6 > 4_Methyltransf_Domains.fasta
# remove domain coordinates from sequence identifiers
sed 's/:.*$//' 4_Methyltransf_Domains.fasta > 4_Methyltransf_Domains.clean.fasta

# Cleanup
rm tmp*

# Count
grep -c '^>' 4_Methyltransf_Domains.fasta
## returns 1104 domains


##############################
# Extract Sterol_MT_C domain #
##############################
grep '.* Sterol_MT_C *' 3_Rhizaria_pfam.txt > tmp1
# use squeeze flag (-s) in tr to replace all white spaces with a tab
tr -s ' ' \\t < tmp1 > tmp2
# extract envelope coordinates
awk -v OFS='\t' '{print $1,$4,$5}' tmp2 > tmp3
# Concatenate domains broken into multiple fragments 
awk -F'\t' -v OFS='\t' '{x=$1;$1="";a[x]=a[x]$0}END{for(x in a)print x,a[x]}' tmp3 > tmp4
tr -s '\t' \\t < tmp4 > tmp5
# Extract name, first envelope coordinate, last envelope coordinate
awk -v OFS='\t' '{print "\047"$1"\047"":"$2"-"$NF}' tmp5 > tmp6
# Extract domains with samtools
xargs samtools faidx --length 100000000 2_Rhizaria_cd.fasta < tmp6 > 4_Sterol_MT_C.fasta
# Remove domain coordinates from sequence identifiers
sed 's/:.*$//' 4_Sterol_MT_C.fasta > 4_Sterol_MT_C.clean.fasta

# Cleanup
rm tmp*

# Count

## returns 397 domains

##############################
# Extract CMAS domain #
##############################
grep '.* CMAS *' 3_Rhizaria_pfam.txt > tmp1
# use squeeze flag (-s) in tr to replace all white spaces with a tab
tr -s ' ' \\t < tmp1 > tmp2
# extract envelope coordinates
awk -v OFS='\t' '{print $1,$4,$5}' tmp2 > tmp3
# Concatenate domains broken into multiple fragments 
awk -F'\t' -v OFS='\t' '{x=$1;$1="";a[x]=a[x]$0}END{for(x in a)print x,a[x]}' tmp3 > tmp4
tr -s '\t' \\t < tmp4 > tmp5
# Extract name, first envelope coordinate, last envelope coordinate
awk -v OFS='\t' '{print "\047"$1"\047"":"$2"-"$NF}' tmp5 > tmp6
# Extract domains with samtools
xargs samtools faidx --length 100000000 2_Rhizaria_cd.fasta < tmp6 > 4_CMAS.fasta
# Remove domain coordinates from sequence identifiers
sed 's/:.*$//' 4_CMAS.fasta > 4_CMAS.clean.fasta

# Cleanup
rm tmp*

# Count
grep -c '^>' 4_CMAS.fasta
## returns 90 domains

################ Extract other domains??? ####################################
# push to github
git remote add origin https://github.com/TessaFossilFinder/23_Rhizaria_SMTs.git
git branch -M main
git push -u origin main

################################################################################
#################################
## ALIGN SEQUENCES using MAFFT ##
#################################
#################################
# Requires MAFFT (https://mafft.cbrc.jp/alignment/software/)

# align 'Methtranf' domain
einsi 4_Methyltransf_Domains.clean.fasta > 5_Methyltransf_Domains_maaft.fasta
# Count
grep -c '^>' 5_Methyltransf_Domains_maaft.fasta
## returns 877 >> no loss

# alignt 'Sterol_MT_C' domain
einsi 4_Sterol_MT_C.clean.fasta > 5_Sterol_MT_C_maaft.fasta
# Count
grep -c '^>' 5_Sterol_MT_C_maaft.fasta
## returns 337 >> no loss

# alignt 'CMAS' domain
einsi 4_CMAS.clean.fasta > 5_CMAS_maaft.fasta

git remote add origin https://github.com/TessaFossilFinder/23_Rhizaria_SMTs.git
# Sets the new remote
git remote -v
# Verifies the new remote URL
###################################
# CONCATENATE seperate alignments #
###################################
# Concatenate sequences into a single sequence entry in the output file nased on sequence ID. If the sequence IDs are different, it will keep both sequences separately.
## this code was edited to not remove sequences missing a domain

# call Python
Python3

# defines a function that reads a FASTA file, extracts the sequences along with their IDs, and returns them as a dictionary 
def read_fasta_file(file_path):
    sequences = {}
    with open(file_path, 'r') as file:
        sequence_id = None
        sequence = ''
        for line in file:
            line = line.strip()
            if line.startswith('>'):
                if sequence_id is not None:
                    sequences[sequence_id] = sequence
                sequence_id = line[1:]
                sequence = ''
            else:
                sequence += line
        if sequence_id is not None:
            sequences[sequence_id] = sequence
    return sequences

def write_fasta_file(file_path, sequences):
    with open(file_path, 'w') as file:
        for sequence_id, sequence in sequences.items():
            file.write('>' + sequence_id + '\n')
            file.write(sequence + '\n')

def concatenate_sequences(fasta_file1, fasta_file2, fasta_file3, output_file):
    sequences1 = read_fasta_file(fasta_file1)
    sequences2 = read_fasta_file(fasta_file2)
    sequences3 = read_fasta_file(fasta_file3)
    
    # Combine sequences from both files into a new dictionary
    concatenated_sequences = {**sequences1, **sequences2, **sequences3}
    
    # Write the concatenated sequences to a new FASTA file
    write_fasta_file(output_file, concatenated_sequences)

# Usageq
fasta_file1 = '5_Methyltransf_Domains_maaft.fasta'
fasta_file2 = '5_Sterol_MT_C_maaft.fasta'
fasta_file3 = '5_CMAS_maaft.fasta'
output_file = '6_Concatenated_Sequences.fasta'

concatenate_sequences(fasta_file1, fasta_file2, fasta_file3, output_file)

quit()

# count
grep -c '^>' 6_Concatenated_Sequences.fasta
## returns 960 sequences

#####################################
# Re-align newly stitched sequences #
#####################################
# align 
einsi 6_Concatenated_sequences.fasta > 6_Concatenated_maaft.fasta
####### possible to eliminate alignments anywhere ??? ##########################

################################################################################
#################################################
## CLEAN up poorly aligned regions with trimAl ##
#################################################
#################################################
# Requires TrimAl (http://trimal.cgenomics.org/use_of_the_command_line_trimal_v1.2)

trimal -in 6_Concatenated_maaft.fasta -gappyout -out 7_Rhizaria_trim.fasta

# count
grep -c '^>' 7_Rhizaria_trim.fasta
## returns 1199 sequences
### sequences are VERY short, need to adjust trimal parameters

# set gap threshold (-gt) to 0.5, columns with up to 50% gaps will be retained. 
trimal -in 6_Concatenated_maaft.fasta -gt 0.5 -out 7_Rhizaria_trimV2.fasta

# set gap threshold (-gt) to 0.2, columns with up to 20% gaps will be retained. 
trimal -in 6_Concatenated_maaft.fasta -gt 0.2 -out 7_Rhizaria_trimV3.fasta
## retains most sequence information, use this version for tree below
### build tree using this version

################################################################################
## ANNOTATE TAXONOMIC INFO to headers #
#######################################
## Desired format >[Accession #]|[Taxonomy_species][(|"OUTGROUP")](|"[No_X-terminal]")
################################################################################
# use CM R code from seq.cleanup_plus_NCBI_V2.2.R

################################################################################ 
############################
## BUILD TREE with IQTree ##
############################
############################
# Requires IQtree (http://www.iqtree.org/)

# copy Iqtree path to PATH
export PATH=/Users/brunoir/Desktop/Bioinformatics_Programs/iqtree-2.1.3-MacOSX/bin:$PATH

# making path to program
ln -s /Users/brunoir/Desktop/Bioinformatics_Programs/iqtree-2.1.3-MacOSX/bin/iqtree2 iqtree

# Automatically determine best fit substitution model and run iqtree with 1000 bootstraps
iqtree -s 7_Rhizaria+_maaft.trimV3.fasta -nt AUTO -m LG+G4 -B 1000
### welp I tossed this file but V2 should work?
## iqtree would have appreciated more trimming?
######### LOOK AT WITH DG ######################
### moved tree files to folder 8_IQTrees, copied .contree file and renamed > 8_Rhizaria+.tree

#
#
#
#
################################################################################
## Annotate taxonomic info to headers #
## Desired format >[Accession #]|[Taxonomy_species][(|"OUTGROUP")](|"[No_X-terminal]")
################################################################################
#############################################
# Label sequences without Sterol_MT_C domain
#############################################

### WIP ######### NEED TO MAKE NEW CODE #######
#
#
#
#
#
#
#
#
###############################################################################
################################################################################




